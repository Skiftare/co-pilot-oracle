from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel,
                             QTableWidget, QTableWidgetItem, QPushButton,
                             QFrame, QComboBox, QHeaderView, QMenu,
                             QAction, QApplication, QMessageBox, QToolButton)
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QIcon, QColor, QCursor
import pandas as pd


class TrendsTab(QWidget):
    def __init__(self, api_client, request_queue):
        super().__init__()
        self.api_client = api_client
        self.request_queue = request_queue
        self.trending_data = None
        self.init_ui()

    def init_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(10)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls_frame = QFrame()
        controls_frame.setObjectName("controlsFrame")
        controls_layout = QHBoxLayout(controls_frame)

        # –ü–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
        period_label = QLabel("Period:")
        period_label.setObjectName("controlLabel")
        self.period_combo = QComboBox()
        self.period_combo.addItems(["1h", "4h", "12h", "24h", "7d"])
        self.period_combo.setCurrentText("24h")
        self.period_combo.setObjectName("styledComboBox")
        controls_layout.addWidget(period_label)
        controls_layout.addWidget(self.period_combo)

        # –§–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–º—É
        volume_label = QLabel("Min Volume (USDT):")
        volume_label.setObjectName("controlLabel")
        self.volume_combo = QComboBox()
        self.volume_combo.addItems(["5,000", "10,000", "50,000", "100,000", "500,000", "1,000,000"])
        self.volume_combo.setCurrentText("50,000")
        self.volume_combo.setObjectName("styledComboBox")
        controls_layout.addWidget(volume_label)
        controls_layout.addWidget(self.volume_combo)

        controls_layout.addStretch()

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤
        self.scan_btn = QPushButton("Scan For Trends")
        self.scan_btn.setObjectName("primaryButton")
        self.scan_btn.setIcon(QIcon("resources/icons/search.png"))
        self.scan_btn.clicked.connect(self.find_trends)
        controls_layout.addWidget(self.scan_btn)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        layout.addWidget(controls_frame)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_frame = QFrame()
        info_frame.setObjectName("infoFrame")
        info_layout = QHBoxLayout(info_frame)

        self.info_label = QLabel("Quickly find trending coins with significant price movement")
        self.info_label.setObjectName("infoLabel")
        info_layout.addWidget(self.info_label)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_label = QLabel("Scanning...")
        self.loading_label.setObjectName("loadingLabel")
        self.loading_label.setVisible(False)
        info_layout.addWidget(self.loading_label, 0, Qt.AlignRight)

        layout.addWidget(info_frame)

        # –¢–∞–±–ª–∏—Ü–∞ —Å —Ç—Ä–µ–Ω–¥–∞–º–∏
        self.table = QTableWidget(0, 5)
        self.table.setHorizontalHeaderLabels(["Symbol", "Price", "24h Change (%)", "Volume", "Actions"])
        self.table.setObjectName("trendsTable")
        self.table.verticalHeader().setVisible(False)

        header = self.table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(3, QHeaderView.Stretch)
        header.setSectionResizeMode(4, QHeaderView.ResizeToContents)

        # –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.table.setContextMenuPolicy(Qt.CustomContextMenu)
        self.table.customContextMenuRequested.connect(self.show_context_menu)

        layout.addWidget(self.table)

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
        tips_frame = QFrame()
        tips_frame.setObjectName("tipsFrame")
        tips_layout = QHBoxLayout(tips_frame)

        tips_label = QLabel("üí° Tip: Right-click on any coin for additional options")
        tips_label.setObjectName("tipsLabel")
        tips_layout.addWidget(tips_label)

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.auto_refresh = QPushButton("Auto Refresh: Off")
        self.auto_refresh.setObjectName("secondaryButton")
        self.auto_refresh.setCheckable(True)
        self.auto_refresh.clicked.connect(self.toggle_auto_refresh)
        tips_layout.addWidget(self.auto_refresh, 0, Qt.AlignRight)

        layout.addWidget(tips_frame)

        # –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.refresh_timer = QTimer()
        self.refresh_timer.timeout.connect(self.find_trends)

    def find_trends(self):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_label.setVisible(True)
        self.scan_btn.setEnabled(False)
        self.scan_btn.setText("Scanning...")

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        period = self.period_combo.currentText()

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å
        task_id = self.request_queue.add_request(
            task_type="fetch_trending_coins",
            timeframe=period,
            limit=30,
            callback=self.update_trends_table
        )

    def update_trends_table(self, data, error=None):
        # –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_label.setVisible(False)
        self.scan_btn.setEnabled(True)
        self.scan_btn.setText("Scan For Trends")

        if error:
            QMessageBox.warning(self, "Error", f"Failed to fetch trending coins: {error}")
            return

        if data is None or len(data) == 0:
            self.info_label.setText("No trending coins found matching your criteria")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.trending_data = data

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –º–µ—Ç–∫—É
        self.info_label.setText(f"Found {len(data)} trending coins. Updated: {pd.Timestamp.now().strftime('%H:%M:%S')}")

        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.table.setRowCount(len(data))

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
        for row, (_, coin) in enumerate(data.iterrows()):
            # –°–∏–º–≤–æ–ª –ø–∞—Ä—ã
            symbol_item = QTableWidgetItem(coin['symbol'])
            symbol_item.setTextAlignment(Qt.AlignLeft | Qt.AlignVCenter)
            self.table.setItem(row, 0, symbol_item)

            # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            price_item = QTableWidgetItem(f"{coin['price']:.8f}")
            price_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
            self.table.setItem(row, 1, price_item)

            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
            change = coin['change']
            change_item = QTableWidgetItem(f"{change:.2f}%")
            change_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)

            # –û–∫—Ä–∞—à–∏–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            if change > 0:
                change_item.setForeground(QColor('#26A69A'))  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Ä–æ—Å—Ç–∞
            else:
                change_item.setForeground(QColor('#EF5350'))  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø–∞–¥–µ–Ω–∏—è

            self.table.setItem(row, 2, change_item)

            # –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
            volume_usd = coin['volume_usd']
            if volume_usd >= 1_000_000:
                volume_text = f"${volume_usd / 1_000_000:.2f}M"
            else:
                volume_text = f"${volume_usd / 1_000:.2f}K"

            volume_item = QTableWidgetItem(volume_text)
            volume_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
            self.table.setItem(row, 3, volume_item)

            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            actions_widget = QWidget()
            actions_layout = QHBoxLayout(actions_widget)
            actions_layout.setContentsMargins(2, 2, 2, 2)
            actions_layout.setSpacing(4)

            # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            copy_btn = QToolButton()
            copy_btn.setIcon(QIcon("resources/icons/copy.png"))
            copy_btn.setToolTip("Copy trading pair")
            copy_btn.setObjectName("tableToolButton")
            copy_btn.clicked.connect(lambda checked, s=coin['symbol']: self.copy_symbol(s))

            # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
            chart_btn = QToolButton()
            chart_btn.setIcon(QIcon("resources/icons/chart.png"))
            chart_btn.setToolTip("Open in Chart")
            chart_btn.setObjectName("tableToolButton")
            chart_btn.clicked.connect(lambda checked, s=coin['symbol']: self.open_in_chart(s))

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ layout
            actions_layout.addWidget(copy_btn)
            actions_layout.addWidget(chart_btn)
            actions_layout.addStretch()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç –≤ —è—á–µ–π–∫—É
            self.table.setCellWidget(row, 4, actions_widget)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω —Å—Ç—Ä–æ–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            bg_color = QColor('rgba(38, 166, 154, 0.1)') if change > 0 else QColor('rgba(239, 83, 80, 0.1)')
            for col in range(5):
                if col != 4:  # –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è —è—á–µ–π–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    self.table.item(row, col).setBackground(bg_color)

    def copy_symbol(self, symbol):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª –ø–∞—Ä—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        QApplication.clipboard().setText(symbol)
        self.info_label.setText(f"Copied {symbol} to clipboard")

    def open_in_chart(self, symbol):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É –≤–æ –≤–∫–ª–∞–¥–∫–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É Info –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä—ã
        # –≠—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
        print(f"Opening {symbol} in chart tab")

    def show_context_menu(self, position):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –ø—Ä–∞–≤–æ–º –∫–ª–∏–∫–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ"""
        menu = QMenu()

        row = self.table.rowAt(position.y())
        if row >= 0:
            symbol = self.table.item(row, 0).text()

            copy_action = QAction(QIcon("resources/icons/copy.png"), f"Copy {symbol}", self)
            copy_action.triggered.connect(lambda: self.copy_symbol(symbol))

            chart_action = QAction(QIcon("resources/icons/chart.png"), f"Open {symbol} Chart", self)
            chart_action.triggered.connect(lambda: self.open_in_chart(symbol))

            menu.addAction(copy_action)
            menu.addAction(chart_action)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            menu.addSeparator()
            menu.addAction(QIcon("resources/icons/info.png"), "View Market Info")
            menu.addAction(QIcon("resources/icons/alert.png"), "Set Price Alert")

            menu.exec_(QCursor.pos())

    def toggle_auto_refresh(self, checked):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        if checked:
            self.auto_refresh.setText("Auto Refresh: On")
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
            self.refresh_timer.start(300000)
        else:
            self.auto_refresh.setText("Auto Refresh: Off")
            self.refresh_timer.stop